{"version":3,"sources":["components/Favourite/img/fav.svg","actions/actions.ts","constants/types.ts","components/AddEvent/AddEvent.tsx","components/Header/Header.tsx","components/RemoveEventBtn/RemoveEventBtn.tsx","components/EditEventBtn/EditEventBtn.tsx","components/Favourite/Favourite.tsx","components/Event/Event.tsx","components/EventsLayout/EventsLayout.tsx","Pages/HomePage/HomePage.tsx","Pages/OldPage/OldPage.tsx","components/Breadcrumbs/Breadcrumbs.tsx","components/CloseBtn/CloseBtn.tsx","constants/currentDate.ts","components/EventForm/EventForm.tsx","App.tsx","serviceWorker.ts","reducer/application.ts","reducer/events.ts","reducer/index.ts","store/getStore.ts","middleware/eventFormatting.ts","index.tsx"],"names":["module","exports","setEventForm","payload","type","mapDispatchToProps","connect","isEventFormOpen","application","props","onClick","className","Header","removeEvent","events","event","EditEventBtn","Favourite","styleClass","src","favIcon","alt","expandEvent","eventsList","map","item","i","key","xmlns","width","height","viewBox","fill","cx","cy","r","eventColor","fillOpacity","stroke","eventTitle","eventDateFrom","eventExpand","handleExpandClick","console","log","eventDate","eventDescription","eventFav","renderExpandSection","EventLayout","currentEvent","filter","eventOutdated","outdatedEvent","Breadcrumbs","to","childResponse","CURRENT_DATE","Date","parse","setEvent","eventTitleField","eventDescField","eventDateField","eventFavField","useState","markColor","setColor","isPickerOpen","setColorPicker","handleColorChange","color","hex","handlePickerClick","handleAddEventClick","data","value","checked","getChildFromParent","name","ref","input","id","required","autoComplete","htmlFor","style","onChange","App","exact","path","component","HomePage","OldPage","Boolean","window","location","hostname","match","initialState","reducer","combineReducers","state","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","next","eventDateFormatted","moment","format","fromNow","eventFormatted","Math","round","random","newAction","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42c081ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fav.1d42aa7d.svg\";","import { SET_EVENT_FORM, SET_EVENT, REMOVE_EVENT, EXPAND_EVENT } from '../constants/types';\n\nexport const setEventForm = payload => ({\n  type: SET_EVENT_FORM,\n  payload\n});\n\nexport const setEvent = payload => ({\n  type: SET_EVENT,\n  payload\n});\n\nexport const removeEvent = payload => ({\n  type: REMOVE_EVENT,\n  payload\n});\n\nexport const expandEvent = payload => ({\n  type: EXPAND_EVENT,\n  payload\n});","export const SET_EVENT_FORM = 'SET_EVENT_FORM',\n  SET_EVENT = 'SET_EVENT',\n  REMOVE_EVENT = 'REMOVE_EVENT',\n  EXPAND_EVENT = 'EXPAND_EVENT';","import React, { Fragment } from 'react';\nimport './AddEvent.scss';\nimport { connect } from 'react-redux';\nimport { setEventForm } from '../../actions/actions';\n\nconst AddEvent = (props) => {\n  const handleClick = (): void => {\n\tconst {setEventForm} = props;\n\tsetEventForm(true);\n  }\n\n  return <button onClick={handleClick} className='btn-addEvent'>Add</button>\n}\n\nconst mapStateToProps = ({application}) => {\n  return {\n\tisEventFormOpen: application.isEventFormOpen\n  }\n}\n\nconst mapDispatchToProps = {\n  setEventForm\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEvent);","import React from 'react';\nimport './Header.scss';\nimport AddEvent from \"../AddEvent/AddEvent\";\n\nconst Header = () => {\n  return <header>\n\t<div className=\"title-wrapper\">\n\t  <h1>event</h1>\n\t</div>\n\t<AddEvent/>\n  </header>\n}\n\nexport default Header;","import React from 'react';\nimport './RemoveEventBtn.scss';\nimport '../Event/Event.scss'\nimport { connect } from 'react-redux';\nimport { removeEvent } from '../../actions/actions';\n\ninterface Props {\n  event: object;\n  events: object[];\n  removeEvent: any;\n}\n\nconst RemoveEventBtn = ({event, events, removeEvent}: Props) => {\n\n  const handleRemoveClick = () => {\n\tremoveEvent(event);\n  }\n\n  return <button onClick={handleRemoveClick} className='event-config-remove'/>\n}\n\nconst mapStateToProps = ({events}) => {\n  return {\n\tevents: events.events\n  }\n}\n\nconst mapDispatchToProps = {\n  removeEvent\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveEventBtn);","import React from 'react';\nimport './EditEventBtn.scss'\nimport '../Event/Event.scss'\n\nconst EditEventBtn = () => {\n  return <button className='event-config-edit'></button>\n}\n\nexport default EditEventBtn;","import React from 'react';\nimport favIcon from './img/fav.svg';\nimport './Favourite.scss';\n\ninterface Props {\n  styleClass: string;\n}\n\nconst Favourite = ({styleClass}: Props) => {\n  return <img className={styleClass || 'favourite'} src={favIcon} alt=\"star\"/>\n}\n\nexport default Favourite;","import React, { Fragment } from 'react';\nimport RemoveEventBtn from \"../RemoveEventBtn/RemoveEventBtn\";\nimport EditEventBtn from '../EditEventBtn/EditEventBtn';\nimport { connect } from 'react-redux';\n\nimport { expandEvent } from '../../actions/actions';\n\nimport Favourite from '../Favourite/Favourite';\n\nimport './Event.scss';\n\nimport { EventDataInterface } from '../../constants/eventData.interface';\n\ninterface Props {\n  eventsList: object[];\n  expandEvent: any;\n}\n\nconst Event = ({eventsList, expandEvent}: any | EventDataInterface) => {\n  const handleExpandClick = (item) => {\n\titem.eventExpand = !item.eventExpand;\n\texpandEvent(item);\n  }\n\n  const renderExpandSection = (item) => {\n\tconsole.log(item)\n\treturn <div className=\"event-expand\">\n\t  <div className=\"expand-date\">\n\t\t<p>{item.eventDate}</p>\n\t  </div>\n\t  <div className=\"expand-desc\">\n\t\t<p>{item.eventDescription}</p>\n\t  </div>\n\t  {item.eventFav && <Favourite styleClass={'event-favourite'} />}\n\t</div>\n  }\n\n  return <Fragment>\n\t{eventsList && eventsList.map((item, i) => {\n\t  return <div key={i} className='event'>\n\t\t<div className=\"dot-wrapper\">\n\t\t  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\">\n\t\t\t<circle cx=\"7.5\" cy=\"7.5\" r=\"7\" fill={item.eventColor} fillOpacity=\"0.5\" stroke='none'/>\n\t\t  </svg>\n\t\t</div>\n\t\t<p className='event-title'>\n\t\t  {item.eventTitle}\n\t\t</p>\n\t\t<p className=\"event-from\">{item.eventDateFrom}</p>\n\t\t<button onClick={() => handleExpandClick(item)} className='show-more'>show more</button>\n\t\t{item.eventExpand && renderExpandSection(item)}\n\t\t<div className=\"event-config\">\n\t\t  <EditEventBtn/>\n\t\t  <RemoveEventBtn event={item}/>\n\t\t</div>\n\t  </div>\n\t})}\n  </Fragment>\n}\n\nconst mapDispatchToProps = {\n  expandEvent\n}\n\nexport default connect(null, mapDispatchToProps)(Event);","import React from 'react';\nimport Event from \"../Event/Event\";\nimport './EventsLayout.scss'\n\ninterface Props {\n  currentEvent: object;\n}\n\nconst EventLayout = ({currentEvent}: Props) => {\n  return <section className='event-layout'>\n\t<Event eventsList={currentEvent}/>\n  </section>\n}\n\nexport default EventLayout;","import React from 'react';\nimport AddEvent from \"../../components/AddEvent/AddEvent\";\nimport EventLayout from \"../../components/EventsLayout/EventsLayout\";\n\nimport { connect } from 'react-redux';\n\nimport './HomePage.scss';\n\nconst HomePage = ({events}) => {\n  const currentEvent = events.filter(item => {\n\tif (!item.eventOutdated) {\n\t  return item;\n\t}\n  })\n\n  return <main className='home-page'>\n\t<div className=\"home-page-addEvent\">\n\t  <AddEvent/>\n\t</div>\n\t<EventLayout currentEvent={currentEvent}/>\n  </main>\n}\n\nconst mapStateToProps = ({events}) => {\n  return {\n\tevents: events.events\n  }\n}\n\nexport default connect(mapStateToProps)(HomePage);","import React from 'react';\nimport EventLayout from \"../../components/EventsLayout/EventsLayout\";\nimport { connect } from 'react-redux';\n\nconst OldPage = ({events}) => {\n  const outdatedEvent = events.filter(item => {\n\tif (item.eventOutdated) {\n\t  return item;\n\t}\n  })\n\n  return <main>\n\t<EventLayout currentEvent={outdatedEvent}/>\n  </main>\n}\n\nconst mapStateToProps = ({events}) => {\n  return {\n\tevents: events.events\n  }\n}\n\nexport default connect(mapStateToProps)(OldPage);","import React from 'react';\nimport './Breadcrumbs.scss';\n//@ts-ignore;\nimport { Link } from 'react-router-dom';\n\nconst Breadcrumbs = () => {\n  return <section className={'breadcrumbs'}>\n\t<Link to='/addevent' className={'breadcrumbs-item'}>Home</Link>\n\t<Link to='/addevent/outdated' className={'breadcrumbs-item'}>Old</Link>\n  </section>\n}\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport './CloseBtn.scss';\nimport { connect } from 'react-redux';\nimport { setEventForm } from '../../actions/actions';\n\ninterface Props {\n  setEventForm: any;\n  styleClass: string;\n  childResponse: any;\n}\n\nconst CloseBtn = ({setEventForm, styleClass, childResponse}: Props) => {\n  const handleEventClose = () => {\n\tsetEventForm(false);\n\tchildResponse(false);\n  }\n\n  return <button className={styleClass} onClick={handleEventClose}>\n\t<div></div>\n  </button>\n}\n\nconst mapDispatchToProps = {\n  setEventForm\n}\n\nexport default connect(null, mapDispatchToProps)(CloseBtn);","// @ts-ignore\nexport const CURRENT_DATE = Date.parse(new Date());","import React, { useState } from 'react';\nimport { TwitterPicker } from 'react-color';\nimport { connect } from 'react-redux';\n\nimport './EventForm.scss';\n\nimport { setEvent, setEventForm } from \"../../actions/actions\";\nimport CloseBtn from \"../CloseBtn/CloseBtn\";\n\nimport { CURRENT_DATE } from \"../../constants/currentDate\";\nimport { EventDataInterface } from \"../../constants/eventData.interface\";\n\n\ninterface Props {\n  isEventFormOpen: boolean;\n  eventTitleField: any;\n  eventDescField: any;\n  eventDateField: any;\n  eventFavField: any;\n  setEvent: any;\n  setEventForm: any;\n  eventOutdated: any;\n}\n\nconst EventForm = ({setEvent, setEventForm, isEventFormOpen, eventTitleField, eventDescField, eventDateField, eventFavField, eventOutdated}: Props) => {\n  const [markColor, setColor] = useState('#000');\n  const [isPickerOpen, setColorPicker] = useState(false);\n\n  const handleColorChange = (color) => {\n\tsetColor(color.hex);\n  }\n\n  const handlePickerClick = () => {\n\tsetColorPicker(!isPickerOpen);\n  }\n\n  const handleAddEventClick = () => {\n\tconst data: EventDataInterface = {\n\t  eventTitle: eventTitleField.value,\n\t  eventDescription: eventDescField.value,\n\t  eventDate: eventDateField.value,\n\t  eventFav: eventFavField.checked,\n\t  eventColor: markColor,\n\t  eventExpand: false,\n\t  // @ts-ignore\n\t  eventOutdated: CURRENT_DATE - Date.parse(new Date(eventDateField.value)) > 0\n\t}\n\n\tif (eventTitleField.value && eventDescField.value && eventDescField.value && eventDateField.value) {\n\t  setEvent(data);\n\t  setEventForm(false);\n\t  setColorPicker(false);\n\n\t  eventTitleField.value = '';\n\t  eventDescField.value = '';\n\t  eventDateField.value = '';\n\t  eventFavField.checked = false;\n\t}\n  }\n\n  const getChildFromParent = (value: boolean): void => {\n\tsetColorPicker(value);\n  }\n\n  const renderEventForm = () => {\n\treturn <section className='full-width'>\n\t  <div className='eventForm'>\n\t\t<div className=\"eventForm-wrapper\">\n\t\t  <CloseBtn childResponse={getChildFromParent} styleClass={'btn-closeForm'}/>\n\t\t  <div className=\"main-title\">\n\t\t\t<h2>Tell about your event</h2>\n\t\t  </div>\n\t\t  <div className=\"form-input\">\n\t\t\t<input type=\"text\" name=\"name\" ref={(input) => eventTitleField = input} className=\"question\" id=\"even-title\"\n\t\t\t\t   required autoComplete=\"off\"/>\n\t\t\t<label htmlFor=\"even-title\">\n\t\t\t  <span>Event title</span>\n\t\t\t</label>\n\t\t  </div>\n\t\t  <div className=\"form-input\">\n\t\t\t<input type=\"text\" name=\"name\" ref={(input) => eventDescField = input} id='even-desc' className=\"question\"\n\t\t\t\t   required autoComplete=\"off\"/>\n\t\t\t<label htmlFor=\"even-desc\">\n\t\t\t  <span>Event description</span>\n\t\t\t</label>\n\t\t  </div>\n\t\t  <div className=\"input-group\">\n\t\t\t<div className=\"form-input\">\n\t\t\t  <label htmlFor=\"even-date\">Date</label>\n\t\t\t  <input ref={(input) => eventDateField = input} id='even-date' className='date-form' type=\"date\"/>\n\t\t\t</div>\n\t\t\t<div className=\"form-input-colorpicker\">\n\t\t\t  <label htmlFor=\"even-color\">Choose color</label>\n\t\t\t  <button className='btn-change-color' style={{'background': markColor}}\n\t\t\t\t\t  onClick={handlePickerClick}/>\n\t\t\t  {isPickerOpen && <TwitterPicker onChange={handleColorChange} color={markColor}/>}\n\t\t\t</div>\n\t\t  </div>\n\t\t  <div className=\"form-favourites\">\n\t\t\t<input ref={(input) => eventFavField = input} className='btn-checkbox' id='even-favourite' type=\"checkbox\"/>\n\t\t\t<label htmlFor=\"even-favourite\">Favourite</label>\n\t\t  </div>\n\t\t  <div className=\"add-event-wrapper\">\n\t\t\t<button onClick={handleAddEventClick} className=\"btn-setEvent\">\n\t\t\t  <div></div>\n\t\t\t</button>\n\t\t  </div>\n\t\t</div>\n\t  </div>\n\t</section>\n  }\n  return (isEventFormOpen && renderEventForm())\n}\n\nconst mapStateToProps = ({application}) => {\n  return {\n\tisEventFormOpen: application.isEventFormOpen\n  }\n}\n\nconst mapDispatchToProps = {\n  setEvent,\n  setEventForm\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventForm);","import React from 'react';\n//@ts-ignore\nimport { Switch, withRouter, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport Header from './components/Header/Header';\nimport HomePage from \"./Pages/HomePage/HomePage\";\nimport OldPage from \"./Pages/OldPage/OldPage\";\nimport Breadcrumbs from \"./components/Breadcrumbs/Breadcrumbs\";\nimport EventForm from './components/EventForm/EventForm';\n\nfunction App() {\n  return (\n\t<div className=\"App\">\n\t  <Header/>\n\t  <Breadcrumbs/>\n\t  <EventForm/>\n\t  <Switch>\n\t\t<Route exact path='/addevent' component={HomePage}/>\n\t\t<Route exact path='/addevent/outdated' component={OldPage}/>\n\t  </Switch>\n\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_EVENT_FORM } from \"../constants/types\";\n\ninterface applicationState {\n  isEventFormOpen: boolean;\n}\n\nconst initialState: applicationState = {\n  isEventFormOpen: false\n}\n\nexport default function application(state = initialState, action): object {\n  switch (action.type) {\n\tcase SET_EVENT_FORM:\n\t  return {...state, isEventFormOpen: action.payload};\n  }\n  return state;\n}","import { SET_EVENT, REMOVE_EVENT, EXPAND_EVENT } from \"../constants/types\";\n\ninterface EventData {\n  events: any;\n}\n\nconst initialState: EventData = {\n  events: []\n}\n\nexport default function events(state = initialState, action): object {\n  switch (action.type) {\n\tcase SET_EVENT:\n\t  return {...state, events: [...state.events, action.payload]}\n\tcase REMOVE_EVENT:\n\t  return {\n\t\t...state,\n\t\tevents: state.events.filter(item => {\n\t\t  return item.id !== action.payload.id\n\t\t})\n\t  }\n\n\tcase EXPAND_EVENT:\n\t  return {\n\t\t...state,\n\t\tevents: state.events.map(item => {\n\t\t  if (item.id === action.payload.id) {\n\t\t\titem.eventExpand = action.payload.eventExpand;\n\t\t\treturn item;\n\t\t  } else return item;\n\t\t})\n\t  }\n  }\n  return state;\n}","import { combineReducers } from \"redux\";\n\nimport application from './application';\nimport events from \"./events\";\n\nconst reducer = combineReducers({\n  application,\n  events\n})\n\nexport default reducer;","//@ts-ignore\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducer from '../reducer/index';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from 'redux-thunk';\nimport { eventFormatting } from '../middleware/eventFormatting';\n\nconst store = createStore(\n  reducer, composeWithDevTools(applyMiddleware(thunk, eventFormatting))\n);\n\nexport default store;","import { SET_EVENT } from \"../constants/types\";\n// @ts-ignore\nimport moment from 'moment';\n\nexport const eventFormatting = store => next => action => {\n  const {type, payload} = action;\n  if (type === SET_EVENT) {\n\tconst eventDateFormatted = moment(payload.eventDate).format('LL');\n\tconst eventDateFrom = moment(payload.eventDate).fromNow();\n\tconst eventFormatted = {\n\t  ...payload,\n\t  eventDate: eventDateFormatted,\n\t  eventDateFrom,\n\t  id: Math.round(Math.random() * 100000),\n\t}\n\tconst newAction = {...action, payload: eventFormatted};\n\tnext(newAction);\n  }\n  else {\n\tnext(action);\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//@ts-ignore;\nimport { BrowserRouter } from 'react-router-dom';\n//@ts-ignore;\nimport { Provider } from 'react-redux';\nimport store from './store/getStore';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t<Provider store={store}>\n\t  <BrowserRouter>\n\t\t<App/>\n\t  </BrowserRouter>\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}